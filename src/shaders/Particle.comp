#version 430 core

	layout (std140, binding = 0) uniform attractor_block{				// Uniform block containing positions and masses of the attractors
		vec4 attractor[64]; 									// xyz = position, w = mass
		};

layout (local_size_x = 128) in;									// Process particles in blocks of 128

layout (rgba32f, binding = 0) uniform imageBuffer velocity_buffer;		// Buffers containing the positions and velocities of the particles
layout (rgba32f, binding = 1) uniform imageBuffer position_buffer;

uniform float dt;												// Delta time



void main(void){												
	vec4 vel = imageLoad(velocity_buffer, int(gl_GlobalInvocationID.x));	// Read the current position and velocity from the buffers
	vec4 pos = imageLoad(position_buffer, int(gl_GlobalInvocationID.x));
	int i;
	
	// Update position using current velocity * time
	pos.xyz += vel.xyz * dt;
	
	// Update "life" of particle in w component
	pos.w -= 0.0001 * dt;
	
	// For each attractor...
	for (i = 0; i < 4; i++){
		// Calculate force and update velocity accordingly
		vec3 dist = (attractor[i].xyz - pos.xyz);
		vel.xyz += dt * dt * attractor[i].w * normalize(dist) / (dot(dist, dist) + 10.0);
		}
	
	// If the particle expires, reset it
	if (pos.w <= 0.0){
		pos.xyz = -pos.xyz * 0.01;
		vel.xyz *= 0.01;
		pos.w += 1.0f;
		}
	
	// Store the new position and velocity back into the buffers
	imageStore(position_buffer, int(gl_GlobalInvocationID.x), pos);
	imageStore(velocity_buffer, int(gl_GlobalInvocationID.x), vel);
	}